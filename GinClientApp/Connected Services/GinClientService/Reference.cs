//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GinClientApp.GinClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GinClientService.IGinClientService", CallbackContract=typeof(GinClientApp.GinClientService.IGinClientServiceCallback))]
    public interface IGinClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/AddRepository", ReplyAction="http://tempuri.org/IGinClientService/AddRepositoryResponse")]
        bool AddRepository(string physicalDirectory, string mountpoint, string name, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/AddRepository", ReplyAction="http://tempuri.org/IGinClientService/AddRepositoryResponse")]
        System.Threading.Tasks.Task<bool> AddRepositoryAsync(string physicalDirectory, string mountpoint, string name, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/UnmountRepository", ReplyAction="http://tempuri.org/IGinClientService/UnmountRepositoryResponse")]
        bool UnmountRepository(string repoName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/UnmountRepository", ReplyAction="http://tempuri.org/IGinClientService/UnmountRepositoryResponse")]
        System.Threading.Tasks.Task<bool> UnmountRepositoryAsync(string repoName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/UnmmountAllRepositories", ReplyAction="http://tempuri.org/IGinClientService/UnmmountAllRepositoriesResponse")]
        bool UnmmountAllRepositories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/UnmmountAllRepositories", ReplyAction="http://tempuri.org/IGinClientService/UnmmountAllRepositoriesResponse")]
        System.Threading.Tasks.Task<bool> UnmmountAllRepositoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/AddCredentials", ReplyAction="http://tempuri.org/IGinClientService/AddCredentialsResponse")]
        bool AddCredentials(string url, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/AddCredentials", ReplyAction="http://tempuri.org/IGinClientService/AddCredentialsResponse")]
        System.Threading.Tasks.Task<bool> AddCredentialsAsync(string url, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/GetRepositoryList", ReplyAction="http://tempuri.org/IGinClientService/GetRepositoryListResponse")]
        GinClientLibrary.GinRepository[] GetRepositoryList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/GetRepositoryList", ReplyAction="http://tempuri.org/IGinClientService/GetRepositoryListResponse")]
        System.Threading.Tasks.Task<GinClientLibrary.GinRepository[]> GetRepositoryListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/UpdateRepository", ReplyAction="http://tempuri.org/IGinClientService/UpdateRepositoryResponse")]
        bool UpdateRepository(string repoName, GinClientLibrary.GinRepository data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/UpdateRepository", ReplyAction="http://tempuri.org/IGinClientService/UpdateRepositoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateRepositoryAsync(string repoName, GinClientLibrary.GinRepository data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/RetrieveFile", ReplyAction="http://tempuri.org/IGinClientService/RetrieveFileResponse")]
        bool RetrieveFile(string repoName, string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/RetrieveFile", ReplyAction="http://tempuri.org/IGinClientService/RetrieveFileResponse")]
        System.Threading.Tasks.Task<bool> RetrieveFileAsync(string repoName, string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/StashFile", ReplyAction="http://tempuri.org/IGinClientService/StashFileResponse")]
        bool StashFile(string repoName, string filepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/StashFile", ReplyAction="http://tempuri.org/IGinClientService/StashFileResponse")]
        System.Threading.Tasks.Task<bool> StashFileAsync(string repoName, string filepath);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGinClientServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/FileOperationStarted", ReplyAction="http://tempuri.org/IGinClientService/FileOperationStartedResponse")]
        void FileOperationStarted(string filename, string repository);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/FileOperationFinished", ReplyAction="http://tempuri.org/IGinClientService/FileOperationFinishedResponse")]
        void FileOperationFinished(string filename, string repository, bool success);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGinClientService/FileOperationProgress", ReplyAction="http://tempuri.org/IGinClientService/FileOperationProgressResponse")]
        void FileOperationProgress(string filename, string repository, int progress, string speed, string state);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGinClientServiceChannel : GinClientApp.GinClientService.IGinClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GinClientServiceClient : System.ServiceModel.DuplexClientBase<GinClientApp.GinClientService.IGinClientService>, GinClientApp.GinClientService.IGinClientService {
        
        public GinClientServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GinClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GinClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GinClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GinClientServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool AddRepository(string physicalDirectory, string mountpoint, string name, string url) {
            return base.Channel.AddRepository(physicalDirectory, mountpoint, name, url);
        }
        
        public System.Threading.Tasks.Task<bool> AddRepositoryAsync(string physicalDirectory, string mountpoint, string name, string url) {
            return base.Channel.AddRepositoryAsync(physicalDirectory, mountpoint, name, url);
        }
        
        public bool UnmountRepository(string repoName) {
            return base.Channel.UnmountRepository(repoName);
        }
        
        public System.Threading.Tasks.Task<bool> UnmountRepositoryAsync(string repoName) {
            return base.Channel.UnmountRepositoryAsync(repoName);
        }
        
        public bool UnmmountAllRepositories() {
            return base.Channel.UnmmountAllRepositories();
        }
        
        public System.Threading.Tasks.Task<bool> UnmmountAllRepositoriesAsync() {
            return base.Channel.UnmmountAllRepositoriesAsync();
        }
        
        public bool AddCredentials(string url, string username, string password) {
            return base.Channel.AddCredentials(url, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> AddCredentialsAsync(string url, string username, string password) {
            return base.Channel.AddCredentialsAsync(url, username, password);
        }
        
        public GinClientLibrary.GinRepository[] GetRepositoryList() {
            return base.Channel.GetRepositoryList();
        }
        
        public System.Threading.Tasks.Task<GinClientLibrary.GinRepository[]> GetRepositoryListAsync() {
            return base.Channel.GetRepositoryListAsync();
        }
        
        public bool UpdateRepository(string repoName, GinClientLibrary.GinRepository data) {
            return base.Channel.UpdateRepository(repoName, data);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRepositoryAsync(string repoName, GinClientLibrary.GinRepository data) {
            return base.Channel.UpdateRepositoryAsync(repoName, data);
        }
        
        public bool RetrieveFile(string repoName, string filepath) {
            return base.Channel.RetrieveFile(repoName, filepath);
        }
        
        public System.Threading.Tasks.Task<bool> RetrieveFileAsync(string repoName, string filepath) {
            return base.Channel.RetrieveFileAsync(repoName, filepath);
        }
        
        public bool StashFile(string repoName, string filepath) {
            return base.Channel.StashFile(repoName, filepath);
        }
        
        public System.Threading.Tasks.Task<bool> StashFileAsync(string repoName, string filepath) {
            return base.Channel.StashFileAsync(repoName, filepath);
        }
    }
}
